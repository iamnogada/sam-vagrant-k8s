# configmap for grafana service
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: grafana
  name: monitoring-grafana-config
  namespace: prometheus
data:
  grafana.ini: |
    app_mode = production
    instance_name = ${HOSTNAME}
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana
    [server]
    protocol = http
    http_port = 3000
    ;domain = localhost 
    ;enforce_domain = false
    ;root_url = %(protocol)s://%(domain)s:%(http_port)s/
    ;router_logging = false
    ;static_root_path = public
    ;enable_gzip = false
    ;cert_file =
    ;cert_key =
    [database]
    ;type = sqlite3
    ;host = 127.0.0.1:3306
    ;name = grafana
    ;user = root
    ;password =
    ;ssl_mode = disable
    ;path = grafana.db
    [session]
    ;provider = file
    ;provider_config = sessions
    ;cookie_name = grafana_sess
    ;cookie_secure = false
    ;session_life_time = 86400
    [analytics]
    ;reporting_enabled = true
    check_for_updates = true
    ;google_analytics_ua_id =
    [security]
    admin_user = admin
    admin_password = admin
    ;secret_key = SW2YcwTIb9zpOOhoPsMm
    ;login_remember_days = 7
    ;cookie_username = grafana_user
    ;cookie_remember_name = grafana_remember
    ;disable_gravatar = false
    ;data_source_proxy_whitelist =
    [snapshots]
    ;external_enabled = true
    ;external_snapshot_url = https://snapshots-origin.raintank.io
    ;external_snapshot_name = Publish to snapshot.raintank.io
    [users]
    ;allow_sign_up = true
    ;allow_org_create = true
    ;auto_assign_org = true
    ;auto_assign_org_role = Viewer
    ;login_hint = email or username
    default_theme = light
    [auth.anonymous]
    ;enabled = true
    ;org_name = Main Org.
    ;org_role = Admin
    [auth.github]
    ;enabled = false
    ;allow_sign_up = false
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email,read:org
    ;auth_url = https://github.com/login/oauth/authorize
    ;token_url = https://github.com/login/oauth/access_token
    ;api_url = https://api.github.com/user
    ;team_ids =
    ;allowed_organizations =
    [auth.google]
    ;enabled = false
    ;allow_sign_up = false
    ;client_id = some_client_id
    ;client_secret = some_client_secret
    ;scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
    ;auth_url = https://accounts.google.com/o/oauth2/auth
    ;token_url = https://accounts.google.com/o/oauth2/token
    ;api_url = https://www.googleapis.com/oauth2/v1/userinfo
    ;allowed_domains =
    [auth.proxy]
    ;enabled = false
    ;header_name = X-WEBAUTH-USER
    ;header_property = username
    ;auto_sign_up = true
    
    [auth.generic_oauth]
    ;name = OAuth
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = 
    ;client_secret = 
    ;scopes = openid email name
    ;auth_url = 
    ;token_url = 
    ;api_url =
    ;team_ids =
    ;allowed_organizations =
    [auth.basic]
    ;enabled = true
    [auth.ldap]
    ;enabled = false
    ;config_file = /etc/grafana/ldap.toml
    [smtp]
    ;enabled = false
    ;host = localhost:25
    ;user =
    ;password =
    ;cert_file =
    ;key_file =
    ;skip_verify = false
    ;from_address = admin@grafana.localhost
    [emails]
    ;welcome_email_on_sign_up = false
    [log]
    mode = console
    level = info
    [log.console]
    ;level =
    ;format = console
    [event_publisher]
    ;enabled = false
    ;rabbitmq_url = amqp://localhost/
    ;exchange = grafana_events
    [dashboards.json]
    enabled = true
    path = /etc/dashboards
    [metrics]
    enabled           = true
    interval_seconds  = 10
    ; [metrics.graphite]
    ; address = localhost:2003
    ; prefix = prod.grafana.%(instance_name)s.
    [grafana_com]
    url = https://grafana.com

---
# grafana config provisioning
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: grafana
  name: monitoring-grafana-config-provisioning-prometheus
  namespace: prometheus 
data:
  provisioning-database.yaml: |
    datasources:
    - name: 'prometheus'
      type: 'prometheus'
      access: 'proxy'
      org_id: 1
      url: 'http://prometheus-service:9090'
      is_default: true
      version: 1
      editable: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: grafana
  name: monitoring-grafana-config-provisioning
  namespace: prometheus
data:
  system.yaml: |
    apiVersion: 1
    providers:
     - name: 'System'
       orgId: 1
       folder: 'System Dashboards'
       type: file
       options:
         path: /var/lib/grafana/dashboards/system
  cluster.yaml: |
    apiVersion: 1
    providers:
     - name: 'Cluster'
       orgId: 1
       folder: 'Cluster Dashboards'
       type: file
       options:
         path: /var/lib/grafana/dashboards/cluster
  container.yaml: |
    apiVersion: 1
    providers:
     - name: 'Container'
       orgId: 1
       folder: 'Container Dashboards'
       type: file
       options:
         path: /var/lib/grafana/dashboards/container
  node.yaml: |
    apiVersion: 1
    providers:
     - name: 'default'
       orgId: 1
       folder: 'Dashboard'
       type: file
       options:
         path: /var/lib/grafana/dashboards/dev

---
# deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: prometheus 
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: grafana
  template:
    metadata:
      labels:
        app: prometheus
        component: grafana
    spec:
      containers:
      - image: grafana/grafana:5.0.4
        name: grafana
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi        
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin
        - name: GF_INSTALL_PLUGINS
          value: grafana-clock-panel,grafana-worldmap-panel
        ports:
        - containerPort: 3000
          name: grafana
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-storage
        - mountPath: /etc/grafana
          name: config-volume
        - mountPath: /var/lib/grafana/dashboards/system
          name: dashboard-system-volume
        - mountPath: /var/lib/grafana/dashboards/cluster
          name: dashboard-cluster-volume
        - mountPath: /var/lib/grafana/dashboards/container
          name: dashboard-container-volume
        - mountPath: /etc/grafana/dashboards
          name: config-volume-provisioning
        - mountPath: /etc/grafana/datasources
          name: config-volume-provisioning-prometheus 
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: dashboard-system-volume
        configMap:
          defaultMode: 420
          name: monitoring-grafana-dashboard-system 
      - name: dashboard-cluster-volume
        configMap:
          defaultMode: 420
          name: monitoring-grafana-dashboard-cluster
      - name: dashboard-container-volume
        configMap:
          defaultMode: 420
          name: monitoring-grafana-dashboard-container
      - name: config-volume
        configMap:
          defaultMode: 420
          name: monitoring-grafana-config
      - name: config-volume-provisioning
        configMap:
          defaultMode: 420
          name: monitoring-grafana-config-provisioning
      - name: config-volume-provisioning-prometheus
        configMap:
          defaultMode: 420
          name: monitoring-grafana-config-provisioning-prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: prometheus
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    component: grafana 
spec:
  type: NodePort
  ports:
    - name: grafana 
      port: 3000
      targetPort: 3000
      protocol: TCP
      nodePort: 30200
  selector:
    app: prometheus
    component: grafana